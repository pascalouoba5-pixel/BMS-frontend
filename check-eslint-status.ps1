# Script pour v√©rifier le statut ESLint du projet
Write-Host "üîç V√©rification du statut ESLint..." -ForegroundColor Green

# V√©rifier si ESLint est install√©
if (-not (Test-Path "node_modules\.bin\eslint.cmd")) {
    Write-Host "‚ùå ESLint n'est pas install√©. Installation en cours..." -ForegroundColor Red
    npm install
    exit 1
}

# Fonction pour analyser un fichier et identifier les erreurs courantes
function Analyze-File {
    param([string]$FilePath)
    
    $content = Get-Content $FilePath -Raw -Encoding UTF8
    $issues = @()
    
    # V√©rifier les apostrophes non √©chapp√©s
    if ($content -match "([^\\])'([^']*?)'([^\\])") {
        $issues += "Apostrophes non √©chapp√©s d√©tect√©s"
    }
    
    # V√©rifier les balises img
    if ($content -match "<img") {
        $issues += "Balises img d√©tect√©es (doivent √™tre remplac√©es par Image)"
    }
    
    # V√©rifier les hooks useEffect sans d√©pendances
    if ($content -match "useEffect\s*\(\s*\(\s*\)\s*=>\s*\{[^}]*\},\s*\[\s*\]\s*\)") {
        $issues += "useEffect sans d√©pendances d√©tect√©"
    }
    
    # V√©rifier les hooks useCallback sans d√©pendances
    if ($content -match "useCallback\s*\(\s*\(\s*\)\s*=>\s*\{[^}]*\},\s*\[\s*\]\s*\)") {
        $issues += "useCallback sans d√©pendances d√©tect√©"
    }
    
    return $issues
}

# Trouver tous les fichiers TypeScript/React
$tsxFiles = Get-ChildItem -Path "." -Recurse -Include "*.tsx", "*.ts" | Where-Object { $_.FullName -notmatch "node_modules|\.next|out" }

Write-Host "üìÅ Analyse de $($tsxFiles.Count) fichiers TypeScript/React" -ForegroundColor Blue

$totalIssues = 0
$filesWithIssues = 0

foreach ($file in $tsxFiles) {
    $issues = Analyze-File $file.FullName
    
    if ($issues.Count -gt 0) {
        $filesWithIssues++
        $totalIssues += $issues.Count
        
        Write-Host "`n‚ö†Ô∏è  $($file.Name) :" -ForegroundColor Yellow
        foreach ($issue in $issues) {
            Write-Host "   - $issue" -ForegroundColor Red
        }
    }
}

Write-Host "`nüìä R√©sum√© de l'analyse :" -ForegroundColor Cyan
Write-Host "   Fichiers analys√©s : $($tsxFiles.Count)" -ForegroundColor White
Write-Host "   Fichiers avec probl√®mes : $filesWithIssues" -ForegroundColor White
Write-Host "   Total des probl√®mes : $totalIssues" -ForegroundColor White

if ($totalIssues -eq 0) {
    Write-Host "`nüéâ Aucun probl√®me d√©tect√© ! Le projet est pr√™t pour le build." -ForegroundColor Green
} else {
    Write-Host "`nüîß Probl√®mes d√©tect√©s. Ex√©cutez le script de correction automatique ou corrigez manuellement." -ForegroundColor Yellow
}

# Ex√©cuter ESLint pour une v√©rification compl√®te
Write-Host "`nüîç Ex√©cution d'ESLint pour une v√©rification compl√®te..." -ForegroundColor Blue
& "node_modules\.bin\eslint.cmd" . --ext .ts,.tsx,.js,.jsx --format=compact --max-warnings=0
