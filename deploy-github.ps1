# Script PowerShell pour d√©ployer le projet React BMS sur GitHub
Write-Host "üöÄ D√©ploiement GitHub du projet React BMS..." -ForegroundColor Green
Write-Host ""

# V√©rifier que nous sommes dans le bon r√©pertoire
if (-not (Test-Path "package.json")) {
    Write-Host "‚ùå Erreur: Ce script doit √™tre ex√©cut√© depuis le dossier frontend" -ForegroundColor Red
    exit 1
}

Write-Host "‚úÖ R√©pertoire frontend d√©tect√©" -ForegroundColor Green

# V√©rifier Git
Write-Host ""
Write-Host "üîß V√©rification de Git..." -ForegroundColor Yellow

try {
    $gitVersion = git --version 2>$null
    if ($LASTEXITCODE -eq 0) {
        Write-Host "‚úÖ Git d√©tect√©: $gitVersion" -ForegroundColor Green
    } else {
        throw "Git non trouv√©"
    }
} catch {
    Write-Host "‚ùå Git non install√©. Veuillez l'installer depuis git-scm.com" -ForegroundColor Red
    exit 1
}

# V√©rifier le statut Git
Write-Host ""
Write-Host "üìä Statut Git..." -ForegroundColor Yellow

if (Test-Path ".git") {
    Write-Host "‚úÖ Repository Git initialis√©" -ForegroundColor Green
    
    # V√©rifier les modifications
    $status = git status --porcelain
    if ($status) {
        Write-Host "üìù Modifications d√©tect√©es:" -ForegroundColor Yellow
        $status | ForEach-Object { Write-Host "   $_" -ForegroundColor Cyan }
    } else {
        Write-Host "‚úÖ Aucune modification" -ForegroundColor Green
    }
} else {
    Write-Host "‚ö†Ô∏è  Repository Git non initialis√©. Initialisation..." -ForegroundColor Yellow
    git init
    Write-Host "‚úÖ Repository Git initialis√©" -ForegroundColor Green
}

# Cr√©er .gitignore si n√©cessaire
Write-Host ""
Write-Host "üìù V√©rification du .gitignore..." -ForegroundColor Yellow

if (-not (Test-Path ".gitignore")) {
    Write-Host "‚ö†Ô∏è  .gitignore manquant. Cr√©ation..." -ForegroundColor Yellow
    
    @"
# Dependencies
node_modules/
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# Production
build/
dist/

# Environment files
.env
.env.local
.env.development.local
.env.test.local
.env.production.local

# IDE
.vscode/
.idea/
*.swp
*.swo

# OS
.DS_Store
Thumbs.db

# Logs
*.log
logs

# Cache
.cache
.eslintcache

# Test coverage
coverage/
.nyc_output

# Temporary files
*.tmp
*.temp
tmp/
temp/
"@ | Out-File -FilePath ".gitignore" -Encoding UTF8
    
    Write-Host "‚úÖ .gitignore cr√©√©" -ForegroundColor Green
} else {
    Write-Host "‚úÖ .gitignore pr√©sent" -ForegroundColor Green
}

# Ajouter les fichiers
Write-Host ""
Write-Host "üìÅ Ajout des fichiers..." -ForegroundColor Yellow

git add .
Write-Host "‚úÖ Fichiers ajout√©s au staging" -ForegroundColor Green

# V√©rifier les fichiers √† commiter
$staged = git diff --cached --name-only
if ($staged) {
    Write-Host "üìã Fichiers √† commiter:" -ForegroundColor Yellow
    $staged | ForEach-Object { Write-Host "   $_" -ForegroundColor Cyan }
} else {
    Write-Host "‚ö†Ô∏è  Aucun fichier √† commiter" -ForegroundColor Yellow
}

# Demander le message de commit
Write-Host ""
Write-Host "üí¨ Message de commit:" -ForegroundColor Yellow
$commitMessage = Read-Host "Entrez le message de commit (ou appuyez sur Entr√©e pour utiliser le message par d√©faut)"

if (-not $commitMessage) {
    $commitMessage = "feat: Initial commit - Frontend React BMS avec configuration Vercel"
}

# Commiter
Write-Host ""
Write-Host "üíæ Commit des modifications..." -ForegroundColor Yellow

try {
    git commit -m $commitMessage
    if ($LASTEXITCODE -eq 0) {
        Write-Host "‚úÖ Commit cr√©√© avec succ√®s" -ForegroundColor Green
    } else {
        Write-Host "‚ùå Erreur lors du commit" -ForegroundColor Red
        exit 1
    }
} catch {
    Write-Host "‚ùå Erreur lors du commit: $($_.Exception.Message)" -ForegroundColor Red
    exit 1
}

# V√©rifier l'origine
Write-Host ""
Write-Host "üåê V√©rification de l'origine..." -ForegroundColor Yellow

$origin = git remote get-url origin 2>$null
if ($origin) {
    Write-Host "‚úÖ Origine configur√©e: $origin" -ForegroundColor Green
} else {
    Write-Host "‚ö†Ô∏è  Aucune origine configur√©e" -ForegroundColor Yellow
    Write-Host "   Configurez l'origine avec:" -ForegroundColor White
    Write-Host "   git remote add origin <URL_DE_VOTRE_REPO>" -ForegroundColor Cyan
}

# Instructions pour la suite
Write-Host ""
Write-Host "üìã Prochaines √©tapes:" -ForegroundColor Yellow
Write-Host "1. Si pas d'origine: git remote add origin <URL_DE_VOTRE_REPO>" -ForegroundColor White
Write-Host "2. Pousser: git push -u origin main" -ForegroundColor White
Write-Host "3. Ou cr√©er une branche: git checkout -b main" -ForegroundColor White
Write-Host "4. Pousser: git push -u origin main" -ForegroundColor White

# Demander si l'utilisateur veut pousser maintenant
Write-Host ""
Write-Host "üéØ Voulez-vous pousser sur GitHub maintenant ? (O/N)" -ForegroundColor Green
$response = Read-Host

if ($response -eq "O" -or $response -eq "o" -or $response -eq "Y" -or $response -eq "y") {
    if ($origin) {
        Write-Host ""
        Write-Host "üöÄ Pouss√©e vers GitHub..." -ForegroundColor Green
        
        try {
            # V√©rifier la branche
            $currentBranch = git branch --show-current
            if (-not $currentBranch) {
                Write-Host "‚ö†Ô∏è  Aucune branche active. Cr√©ation de la branche main..." -ForegroundColor Yellow
                git checkout -b main
            }
            
            # Pousser
            git push -u origin main
            if ($LASTEXITCODE -eq 0) {
                Write-Host "‚úÖ Projet pouss√© avec succ√®s sur GitHub !" -ForegroundColor Green
            } else {
                Write-Host "‚ùå Erreur lors de la pouss√©e" -ForegroundColor Red
            }
        } catch {
            Write-Host "‚ùå Erreur lors de la pouss√©e: $($_.Exception.Message)" -ForegroundColor Red
        }
    } else {
        Write-Host "‚ùå Impossible de pousser sans origine configur√©e" -ForegroundColor Red
    }
} else {
    Write-Host ""
    Write-Host "‚ÑπÔ∏è  Pouss√©e annul√©e. Ex√©cutez manuellement:" -ForegroundColor Yellow
    Write-Host "   git push -u origin main" -ForegroundColor White
}

Write-Host ""
Write-Host "‚úÖ Script termin√© !" -ForegroundColor Green

# Garder la fen√™tre ouverte
Read-Host "Appuyez sur Entr√©e pour fermer..."
