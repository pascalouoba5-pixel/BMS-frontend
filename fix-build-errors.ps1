# Script PowerShell pour corriger les erreurs de build
Write-Host "üîß Correction des erreurs de build BMS..." -ForegroundColor Green
Write-Host ""

# V√©rifier que nous sommes dans le bon r√©pertoire
if (-not (Test-Path "package.json")) {
    Write-Host "‚ùå Erreur: Ce script doit √™tre ex√©cut√© depuis le dossier frontend" -ForegroundColor Red
    exit 1
}

Write-Host "‚úÖ R√©pertoire frontend d√©tect√©" -ForegroundColor Green

# 1. Installer les d√©pendances manquantes
Write-Host ""
Write-Host "üì¶ Installation des d√©pendances manquantes..." -ForegroundColor Yellow

try {
    Write-Host "   Installation de recharts..." -ForegroundColor White
    npm install recharts@^2.12.0
    if ($LASTEXITCODE -eq 0) {
        Write-Host "‚úÖ recharts install√© avec succ√®s" -ForegroundColor Green
    } else {
        Write-Host "‚ùå Erreur lors de l'installation de recharts" -ForegroundColor Red
    }
} catch {
    Write-Host "‚ùå Erreur lors de l'installation: $($_.Exception.Message)" -ForegroundColor Red
}

# 2. V√©rifier et corriger les erreurs de syntaxe
Write-Host ""
Write-Host "üîç V√©rification des erreurs de syntaxe..." -ForegroundColor Yellow

# V√©rifier le fichier login/page.tsx
$loginFile = "app/login/page.tsx"
if (Test-Path $loginFile) {
    $content = Get-Content $loginFile -Raw
    $lines = $content.Split("`n")
    
    # V√©rifier les accolades en trop
    $openBraces = ($content | Select-String -Pattern "{" -AllMatches).Matches.Count
    $closeBraces = ($content | Select-String -Pattern "}" -AllMatches).Matches.Count
    
    if ($closeBraces -gt $openBraces) {
        Write-Host "‚ö†Ô∏è  Accolades fermantes en trop d√©tect√©es dans $loginFile" -ForegroundColor Yellow
        
        # Corriger automatiquement
        $correctedContent = $content -replace "}\s*}\s*$", "}"
        Set-Content -Path $loginFile -Value $correctedContent -Encoding UTF8
        Write-Host "‚úÖ Correction automatique appliqu√©e" -ForegroundColor Green
    } else {
        Write-Host "‚úÖ $loginFile - Syntaxe correcte" -ForegroundColor Green
    }
} else {
    Write-Host "‚ùå $loginFile non trouv√©" -ForegroundColor Red
}

# 3. V√©rifier le fichier performance/page.tsx
$performanceFile = "app/performance/page.tsx"
if (Test-Path $performanceFile) {
    $content = Get-Content $performanceFile -Raw
    
    # V√©rifier l'import de recharts
    if ($content -match "from 'recharts'") {
        Write-Host "‚úÖ $performanceFile - Import recharts correct" -ForegroundColor Green
    } else {
        Write-Host "‚ö†Ô∏è  $performanceFile - Import recharts manquant" -ForegroundColor Yellow
    }
} else {
    Write-Host "‚ùå $performanceFile non trouv√©" -ForegroundColor Red
}

# 4. Nettoyer le cache
Write-Host ""
Write-Host "üßπ Nettoyage du cache..." -ForegroundColor Yellow

$cacheFolders = @(".next", "node_modules/.cache", ".eslintcache")
foreach ($folder in $cacheFolders) {
    if (Test-Path $folder) {
        try {
            Remove-Item -Path $folder -Recurse -Force
            Write-Host "‚úÖ $folder supprim√©" -ForegroundColor Green
        } catch {
            Write-Host "‚ö†Ô∏è  Impossible de supprimer $folder" -ForegroundColor Yellow
        }
    }
}

# 5. Test de build
Write-Host ""
Write-Host "üèóÔ∏è  Test de build..." -ForegroundColor Yellow

try {
    npm run build
    if ($LASTEXITCODE -eq 0) {
        Write-Host "‚úÖ Build r√©ussi !" -ForegroundColor Green
    } else {
        Write-Host "‚ùå Build √©chou√©" -ForegroundColor Red
        Write-Host "   V√©rifiez les erreurs ci-dessus" -ForegroundColor Yellow
    }
} catch {
    Write-Host "‚ùå Erreur lors du build: $($_.Exception.Message)" -ForegroundColor Red
}

# 6. Instructions pour le d√©ploiement
Write-Host ""
Write-Host "üìã Instructions pour le d√©ploiement:" -ForegroundColor Yellow
Write-Host "1. Si le build r√©ussit, commitez les corrections:" -ForegroundColor White
Write-Host "   git add ." -ForegroundColor Cyan
Write-Host "   git commit -m 'fix: Correction des erreurs de build'" -ForegroundColor Cyan
Write-Host "   git push" -ForegroundColor Cyan

Write-Host ""
Write-Host "2. Vercel red√©ploiera automatiquement" -ForegroundColor White
Write-Host "3. V√©rifiez le statut sur le dashboard Vercel" -ForegroundColor White

Write-Host ""
Write-Host "‚úÖ Script de correction termin√© !" -ForegroundColor Green

# Garder la fen√™tre ouverte
Read-Host "Appuyez sur Entr√©e pour fermer..."
