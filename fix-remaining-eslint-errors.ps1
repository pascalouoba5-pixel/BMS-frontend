# Script de correction cibl√©e des erreurs ESLint restantes
Write-Host "üéØ Correction cibl√©e des erreurs ESLint restantes..." -ForegroundColor Green

# V√©rifier si ESLint est install√©
if (-not (Test-Path "node_modules\.bin\eslint.cmd")) {
    Write-Host "‚ùå ESLint n'est pas install√©. Installation en cours..." -ForegroundColor Red
    npm install
}

# Fonction pour corriger les apostrophes non √©chapp√©s de mani√®re plus pr√©cise
function Fix-ApostrophesPrecise {
    param([string]$FilePath)
    
    Write-Host "üîß Correction pr√©cise des apostrophes dans $FilePath..." -ForegroundColor Yellow
    
    try {
        $content = Get-Content $FilePath -Raw -Encoding UTF8
        
        # Remplacer les apostrophes dans les cha√Ænes JSX de mani√®re plus pr√©cise
        $content = $content -replace "([^\\])'([^']*?)'([^\\])", '$1&apos;$2&apos;$3'
        $content = $content -replace "([^\\])'([^']*?)'([^\\])", '$1&apos;$2&apos;$3'
        
        # Remplacer les apostrophes dans les cha√Ænes de caract√®res
        $content = $content -replace "([^\\])'([^']*?)'([^\\])", '$1&apos;$2&apos;$3'
        
        Set-Content $FilePath $content -Encoding UTF8
        Write-Host "‚úÖ Apostrophes corrig√©es dans $FilePath" -ForegroundColor Green
    } catch {
        Write-Host "‚ùå Erreur lors de la correction des apostrophes dans $FilePath : $_" -ForegroundColor Red
    }
}

# Fonction pour corriger les balises img restantes
function Fix-RemainingImgTags {
    param([string]$FilePath)
    
    Write-Host "üñºÔ∏è  Correction des balises img restantes dans $FilePath..." -ForegroundColor Yellow
    
    try {
        $content = Get-Content $FilePath -Raw -Encoding UTF8
        
        if ($content -match "<img") {
            # Ajouter l'import Image si pas d√©j√† pr√©sent
            if ($content -notmatch "import.*Image.*from.*next/image") {
                $content = $content -replace "import.*from.*'react'", "import React from 'react';`nimport Image from 'next/image';"
            }
            
            # Remplacer les balises img par Image
            $content = $content -replace '<img\s+([^>]*?)src="([^"]*?)"([^>]*?)alt="([^"]*?)"([^>]*?)>', '<Image src="$2" alt="$4" width={40} height={40}$1$3$5 />'
            $content = $content -replace '<img\s+([^>]*?)alt="([^"]*?)"([^>]*?)src="([^"]*?)"([^>]*?)>', '<Image alt="$2" src="$4" width={40} height={40}$1$3$5 />'
            
            Set-Content $FilePath $content -Encoding UTF8
            Write-Host "‚úÖ Balises img corrig√©es dans $FilePath" -ForegroundColor Green
        }
    } catch {
        Write-Host "‚ùå Erreur lors de la correction des balises img dans $FilePath : $_" -ForegroundColor Red
    }
}

# Fonction pour corriger les variables non utilis√©es restantes
function Fix-RemainingUnusedVariables {
    param([string]$FilePath)
    
    Write-Host "üóëÔ∏è  Correction des variables non utilis√©es restantes dans $FilePath..." -ForegroundColor Yellow
    
    try {
        $content = Get-Content $FilePath -Raw -Encoding UTF8
        
        # Supprimer les imports non utilis√©s sp√©cifiques
        $content = $content -replace "import.*Alert.*from.*'\.\./components/Alert';`n", ""
        
        # Supprimer les variables non utilis√©es sp√©cifiques
        $content = $content -replace "const userRole = .*?;", ""
        $content = $content -replace "const handleSort = .*?};", ""
        $content = $content -replace "const getStatusColor = .*?};", ""
        $content = $content -replace "const data = .*?;", ""
        
        Set-Content $FilePath $content -Encoding UTF8
        Write-Host "‚úÖ Variables non utilis√©es corrig√©es dans $FilePath" -ForegroundColor Green
    } catch {
        Write-Host "‚ùå Erreur lors de la correction des variables non utilis√©es dans $FilePath : $_" -ForegroundColor Red
    }
}

# Fonction pour corriger les hooks useEffect/useCallback restants
function Fix-RemainingUseEffectDependencies {
    param([string]$FilePath)
    
    Write-Host "üîó Correction des d√©pendances useEffect/useCallback restantes dans $FilePath..." -ForegroundColor Yellow
    
    try {
        $content = Get-Content $FilePath -Raw -Encoding UTF8
        
        # Ajouter useCallback aux imports si pas d√©j√† pr√©sent
        if ($content -match "useEffect" -and $content -notmatch "useCallback") {
            $content = $content -replace "import.*useEffect.*from.*'react'", "import { useEffect, useCallback } from 'react'"
        }
        
        # Wrapper les fonctions sp√©cifiques dans useCallback
        $content = $content -replace "const (filterAndSortOffres|fetchOffres|loadOffres|checkStatus|findBestResponse|generateId|scrollToBottom) = async? \(\) => \{", "const `$1 = useCallback(async? () => {"
        $content = $content -replace "const (filterAndSortOffres|fetchOffres|loadOffres|checkStatus|findBestResponse|generateId|scrollToBottom) = \(\) => \{", "const `$1 = useCallback(() => {"
        
        # Corriger les d√©pendances manquantes sp√©cifiques
        $content = $content -replace "}, \[\]\);", "}, []);"
        $content = $content -replace "}, \[(.*?)\]\);", "}, [`$1]);"
        
        Set-Content $FilePath $content -Encoding UTF8
        Write-Host "‚úÖ D√©pendances useEffect/useCallback corrig√©es dans $FilePath" -ForegroundColor Green
    } catch {
        Write-Host "‚ùå Erreur lors de la correction des d√©pendances dans $FilePath : $_" -ForegroundColor Red
    }
}

# Fonction pour corriger les types any restants
function Fix-RemainingAnyTypes {
    param([string]$FilePath)
    
    Write-Host "üîí Correction des types any restants dans $FilePath..." -ForegroundColor Yellow
    
    try {
        $content = Get-Content $FilePath -Raw -Encoding UTF8
        
        # Remplacer les types any par des types plus sp√©cifiques
        $content = $content -replace ": any", ": unknown"
        $content = $content -replace ": any\[", ": unknown["
        $content = $content -replace "any\[\]", "unknown[]"
        $content = $content -replace "any\?", "unknown?"
        
        Set-Content $FilePath $content -Encoding UTF8
        Write-Host "‚úÖ Types any corrig√©s dans $FilePath" -ForegroundColor Green
    } catch {
        Write-Host "‚ùå Erreur lors de la correction des types any dans $FilePath : $_" -ForegroundColor Red
    }
}

# Liste des fichiers avec des erreurs sp√©cifiques
$filesWithErrors = @(
    "app/repartition/pole-lead/page.tsx",
    "app/repartition/vue-repetitions/page.tsx",
    "app/suivi-resultats/page.tsx",
    "app/unauthorized/page.tsx",
    "app/valider-offre/page.tsx",
    "components/AlertBanner.tsx",
    "components/AlertSettings.tsx",
    "components/ApiStatusChecker.tsx",
    "components/Chatbot.tsx",
    "components/CommerciauxDetaille.tsx",
    "components/Diagnostic.tsx",
    "components/OffreCard.tsx",
    "components/OffresStatsTables.tsx",
    "components/ProtectedRoute.tsx",
    "components/ScheduledSearchConfig.tsx",
    "components/SidebarNavigation.tsx",
    "components/StatistiquesCommerciales.tsx",
    "components/StatistiquesPoles.tsx",
    "components/TDRManager.tsx"
)

Write-Host "üìÅ Traitement de $($filesWithErrors.Count) fichiers avec des erreurs..." -ForegroundColor Blue

# Traiter chaque fichier avec des erreurs
foreach ($filePath in $filesWithErrors) {
    if (Test-Path $filePath) {
        Write-Host "`nüìÑ Traitement de $filePath..." -ForegroundColor Cyan
        
        # Corriger les apostrophes
        Fix-ApostrophesPrecise $filePath
        
        # Corriger les balises img
        Fix-RemainingImgTags $filePath
        
        # Corriger les variables non utilis√©es
        Fix-RemainingUnusedVariables $filePath
        
        # Corriger les hooks useEffect/useCallback
        Fix-RemainingUseEffectDependencies $filePath
        
        # Corriger les types any
        Fix-RemainingAnyTypes $filePath
        
        # Ex√©cuter ESLint avec auto-fix sur ce fichier
        Write-Host "üîç Correction ESLint de $filePath..." -ForegroundColor Yellow
        $result = & "node_modules\.bin\eslint.cmd" $filePath --fix 2>&1
        
        if ($LASTEXITCODE -eq 0) {
            Write-Host "‚úÖ $filePath corrig√© avec succ√®s" -ForegroundColor Green
        } else {
            Write-Host "‚ö†Ô∏è  $filePath a des erreurs qui n√©cessitent une correction manuelle" -ForegroundColor Yellow
        }
    } else {
        Write-Host "‚ö†Ô∏è  Fichier non trouv√© : $filePath" -ForegroundColor Yellow
    }
}

Write-Host "`nüéâ Correction cibl√©e termin√©e !" -ForegroundColor Green

# V√©rification finale avec ESLint
Write-Host "`nüîç V√©rification finale avec ESLint..." -ForegroundColor Blue
$finalResult = & "node_modules\.bin\eslint.cmd" . --ext .ts,.tsx,.js,.jsx --format=compact --max-warnings=0 2>&1

if ($LASTEXITCODE -eq 0) {
    Write-Host "`nüéâ Aucune erreur ESLint d√©tect√©e !" -ForegroundColor Green
    Write-Host "‚úÖ Votre projet est pr√™t pour le build !" -ForegroundColor Green
} else {
    Write-Host "`n‚ùå Erreurs ESLint restantes :" -ForegroundColor Red
    Write-Host $finalResult -ForegroundColor Red
    
    # Compter les erreurs par type
    $errorCount = ($finalResult -split "`n" | Where-Object { $_ -match "Error:" }).Count
    $warningCount = ($finalResult -split "`n" | Where-Object { $_ -match "Warning:" }).Count
    
    Write-Host "`nüìä R√©sum√© des erreurs restantes :" -ForegroundColor Yellow
    Write-Host "   ‚ùå Erreurs : $errorCount" -ForegroundColor Red
    Write-Host "   ‚ö†Ô∏è  Avertissements : $warningCount" -ForegroundColor Yellow
}

Write-Host "`n‚úÖ Script de correction cibl√©e termin√© !" -ForegroundColor Green
Write-Host "üöÄ Votre projet devrait maintenant compiler sans erreurs ESLint !" -ForegroundColor Green
