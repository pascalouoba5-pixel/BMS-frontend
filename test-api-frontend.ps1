# Script PowerShell pour tester le frontend BMS et l'API
Write-Host "üß™ Test du Frontend BMS et de l'API..." -ForegroundColor Green
Write-Host "üåê Backend: https://bms-backend-9k8n.onrender.com" -ForegroundColor Cyan
Write-Host ""

# V√©rifier que nous sommes dans le bon r√©pertoire
if (-not (Test-Path "package.json")) {
    Write-Host "‚ùå Erreur: Ce script doit √™tre ex√©cut√© depuis le dossier frontend" -ForegroundColor Red
    exit 1
}

Write-Host "‚úÖ R√©pertoire frontend d√©tect√©" -ForegroundColor Green

# V√©rifier les d√©pendances
Write-Host "üì¶ V√©rification des d√©pendances..." -ForegroundColor Yellow
if (-not (Test-Path "node_modules")) {
    Write-Host "‚ö†Ô∏è  D√©pendances non install√©es. Installation en cours..." -ForegroundColor Yellow
    npm install
    if ($LASTEXITCODE -ne 0) {
        Write-Host "‚ùå Erreur lors de l'installation des d√©pendances" -ForegroundColor Red
        exit 1
    }
} else {
    Write-Host "‚úÖ D√©pendances d√©j√† install√©es" -ForegroundColor Green
}

# V√©rifier la configuration
Write-Host ""
Write-Host "üîß V√©rification de la configuration..." -ForegroundColor Yellow

# V√©rifier les fichiers de configuration
$configFiles = @(
    "next.config.ts",
    "config/api.ts",
    "services/api.ts",
    "hooks/useApi.ts"
)

foreach ($file in $configFiles) {
    if (Test-Path $file) {
        Write-Host "‚úÖ $file" -ForegroundColor Green
    } else {
        Write-Host "‚ùå $file manquant" -ForegroundColor Red
    }
}

# V√©rifier les composants
Write-Host ""
Write-Host "üß© V√©rification des composants..." -ForegroundColor Yellow

$components = @(
    "components/ApiStatusChecker.tsx",
    "components/HomeButton.tsx",
    "app/login/page.tsx",
    "app/api-test/page.tsx"
)

foreach ($component in $components) {
    if (Test-Path $component) {
        Write-Host "‚úÖ $component" -ForegroundColor Green
    } else {
        Write-Host "‚ùå $component manquant" -ForegroundColor Red
    }
}

# V√©rifier les variables d'environnement
Write-Host ""
Write-Host "üåç V√©rification des variables d'environnement..." -ForegroundColor Yellow

if (Test-Path ".env.local") {
    Write-Host "‚úÖ .env.local pr√©sent" -ForegroundColor Green
    Get-Content ".env.local" | ForEach-Object {
        if ($_ -match "NEXT_PUBLIC_API_URL") {
            Write-Host "   $($_.Trim())" -ForegroundColor Cyan
        }
    }
} else {
    Write-Host "‚ö†Ô∏è  .env.local manquant - cr√©ation recommand√©e" -ForegroundColor Yellow
}

if (Test-Path ".env.production") {
    Write-Host "‚úÖ .env.production pr√©sent" -ForegroundColor Green
    Get-Content ".env.production" | ForEach-Object {
        if ($_ -match "NEXT_PUBLIC_API_URL") {
            Write-Host "   $($_.Trim())" -ForegroundColor Cyan
        }
    }
} else {
    Write-Host "‚ö†Ô∏è  .env.production manquant - cr√©ation recommand√©e" -ForegroundColor Yellow
}

# Test de l'API backend
Write-Host ""
Write-Host "üîç Test de l'API backend..." -ForegroundColor Yellow

try {
    Write-Host "üì° Test de /api/health..." -ForegroundColor White
    $healthResponse = Invoke-RestMethod -Uri "https://bms-backend-9k8n.onrender.com/api/health" -Method Get
    Write-Host "‚úÖ Health check OK: $($healthResponse.message)" -ForegroundColor Green
    Write-Host "   Port: $($healthResponse.port)" -ForegroundColor Cyan
    Write-Host "   Environment: $($healthResponse.environment)" -ForegroundColor Cyan
} catch {
    Write-Host "‚ùå Health check √©chou√©: $($_.Exception.Message)" -ForegroundColor Red
}

try {
    Write-Host "üì° Test de /api/auth/test..." -ForegroundColor White
    $authTestResponse = Invoke-RestMethod -Uri "https://bms-backend-9k8n.onrender.com/api/auth/test" -Method Get
    Write-Host "‚úÖ Auth test OK: $($authTestResponse.message)" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Auth test √©chou√©: $($_.Exception.Message)" -ForegroundColor Red
}

# Test de la route login
Write-Host ""
Write-Host "üîê Test de la route login..." -ForegroundColor Yellow

try {
    $loginData = @{
        email = "test@bms.com"
        password = "password123"
    } | ConvertTo-Json

    $loginResponse = Invoke-RestMethod -Uri "https://bms-backend-9k8n.onrender.com/api/auth/login" -Method Post -Body $loginData -ContentType "application/json"
    Write-Host "‚úÖ Login OK: $($loginResponse.message)" -ForegroundColor Green
    Write-Host "   Utilisateur: $($loginResponse.user.email)" -ForegroundColor Cyan
    Write-Host "   Token: $($loginResponse.token.Substring(0, [Math]::Min(20, $loginResponse.token.Length)))..." -ForegroundColor Cyan
} catch {
    Write-Host "‚ùå Login √©chou√©: $($_.Exception.Message)" -ForegroundColor Red
}

# Instructions de d√©marrage
Write-Host ""
Write-Host "üöÄ Instructions de d√©marrage:" -ForegroundColor Green
Write-Host "1. D√©marrer le frontend: npm run dev" -ForegroundColor White
Write-Host "2. Ouvrir: http://localhost:3000" -ForegroundColor White
Write-Host "3. Tester la connexion: http://localhost:3000/login" -ForegroundColor White
Write-Host "4. Tester l'API: http://localhost:3000/api-test" -ForegroundColor White

Write-Host ""
Write-Host "üîß Configuration recommand√©e:" -ForegroundColor Yellow
Write-Host "Cr√©er .env.local avec:" -ForegroundColor White
Write-Host "NEXT_PUBLIC_API_URL=http://localhost:10000" -ForegroundColor Cyan

Write-Host ""
Write-Host "üåê Pour la production Vercel:" -ForegroundColor Yellow
Write-Host "Cr√©er .env.production avec:" -ForegroundColor White
Write-Host "NEXT_PUBLIC_API_URL=https://bms-backend-9k8n.onrender.com" -ForegroundColor Cyan

Write-Host ""
Write-Host "üéØ Tests disponibles:" -ForegroundColor Green
Write-Host "- Page de connexion: /login" -ForegroundColor White
Write-Host "- Test de l'API: /api-test" -ForegroundColor White
Write-Host "- Compte de test: test@bms.com / password123" -ForegroundColor White

# Garder la fen√™tre ouverte
Read-Host "Appuyez sur Entr√©e pour fermer..."
