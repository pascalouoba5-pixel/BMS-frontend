# Script de test de build pour v√©rifier que le projet compile sans erreurs ESLint
Write-Host "üß™ Test de build du projet BMS Frontend..." -ForegroundColor Green

# V√©rifier que nous sommes dans le bon dossier
if (-not (Test-Path "package.json")) {
    Write-Host "‚ùå Erreur : Ce script doit √™tre ex√©cut√© dans le dossier frontend" -ForegroundColor Red
    exit 1
}

# V√©rifier que les d√©pendances sont install√©es
if (-not (Test-Path "node_modules")) {
    Write-Host "üì¶ Installation des d√©pendances..." -ForegroundColor Yellow
    npm install
    if ($LASTEXITCODE -ne 0) {
        Write-Host "‚ùå Erreur lors de l'installation des d√©pendances" -ForegroundColor Red
        exit 1
    }
}

# √âtape 1 : V√©rification ESLint
Write-Host "`nüîç √âtape 1 : V√©rification ESLint..." -ForegroundColor Blue
$eslintResult = & "node_modules\.bin\eslint.cmd" . --ext .ts,.tsx,.js,.jsx --format=compact --max-warnings=0 2>&1

if ($LASTEXITCODE -eq 0) {
    Write-Host "‚úÖ ESLint : Aucune erreur d√©tect√©e" -ForegroundColor Green
} else {
    Write-Host "‚ùå ESLint : Erreurs d√©tect√©es" -ForegroundColor Red
    Write-Host $eslintResult -ForegroundColor Red
    Write-Host "`nüí° Ex√©cutez d'abord le script de correction ESLint : .\fix-eslint-errors.ps1" -ForegroundColor Yellow
    exit 1
}

# √âtape 2 : V√©rification TypeScript
Write-Host "`nüîç √âtape 2 : V√©rification TypeScript..." -ForegroundColor Blue
$tscResult = & "node_modules\.bin\tsc.cmd" --noEmit 2>&1

if ($LASTEXITCODE -eq 0) {
    Write-Host "‚úÖ TypeScript : Aucune erreur de type d√©tect√©e" -ForegroundColor Green
} else {
    Write-Host "‚ùå TypeScript : Erreurs de type d√©tect√©es" -ForegroundColor Red
    Write-Host $tscResult -ForegroundColor Red
    exit 1
}

# √âtape 3 : Test de build
Write-Host "`nüîç √âtape 3 : Test de build..." -ForegroundColor Blue
Write-Host "‚è≥ Construction du projet (cela peut prendre quelques minutes)..." -ForegroundColor Yellow

$buildResult = & npm run build 2>&1

if ($LASTEXITCODE -eq 0) {
    Write-Host "‚úÖ Build : Projet construit avec succ√®s !" -ForegroundColor Green
    
    # V√©rifier que le dossier .next a √©t√© cr√©√©
    if (Test-Path ".next") {
        Write-Host "‚úÖ Dossier .next cr√©√© avec succ√®s" -ForegroundColor Green
    } else {
        Write-Host "‚ö†Ô∏è  Dossier .next non trouv√©" -ForegroundColor Yellow
    }
    
} else {
    Write-Host "‚ùå Build : √âchec de la construction" -ForegroundColor Red
    Write-Host $buildResult -ForegroundColor Red
    exit 1
}

# √âtape 4 : V√©rification finale
Write-Host "`nüîç √âtape 4 : V√©rification finale..." -ForegroundColor Blue

# V√©rifier la taille du build
if (Test-Path ".next") {
    $buildSize = (Get-ChildItem ".next" -Recurse | Measure-Object -Property Length -Sum).Sum / 1MB
    Write-Host "üìä Taille du build : $([math]::Round($buildSize, 2)) MB" -ForegroundColor Cyan
}

# V√©rifier les fichiers de sortie
$outputFiles = @(
    ".next",
    "package.json",
    "next.config.ts",
    "tailwind.config.js"
)

$missingFiles = @()
foreach ($file in $outputFiles) {
    if (Test-Path $file) {
        Write-Host "‚úÖ $file : Pr√©sent" -ForegroundColor Green
    } else {
        Write-Host "‚ùå $file : Manquant" -ForegroundColor Red
        $missingFiles += $file
    }
}

# R√©sum√© final
Write-Host "`nüéâ R√©sum√© du test de build :" -ForegroundColor Green
Write-Host "   ‚úÖ ESLint : Pass√©" -ForegroundColor Green
Write-Host "   ‚úÖ TypeScript : Pass√©" -ForegroundColor Green
Write-Host "   ‚úÖ Build : Pass√©" -ForegroundColor Green

if ($missingFiles.Count -gt 0) {
    Write-Host "   ‚ö†Ô∏è  Fichiers manquants : $($missingFiles.Count)" -ForegroundColor Yellow
} else {
    Write-Host "   ‚úÖ Tous les fichiers requis sont pr√©sents" -ForegroundColor Green
}

Write-Host "`nüöÄ Le projet est pr√™t pour la production !" -ForegroundColor Green
Write-Host "üí° Vous pouvez maintenant d√©ployer ou d√©marrer le serveur de production avec :" -ForegroundColor Yellow
Write-Host "   npm start" -ForegroundColor White

# Nettoyage optionnel
Write-Host "`nüßπ Nettoyage du dossier .next ? (y/n)" -ForegroundColor Yellow
$cleanup = Read-Host

if ($cleanup -eq "y" -or $cleanup -eq "Y") {
    if (Test-Path ".next") {
        Remove-Item ".next" -Recurse -Force
        Write-Host "‚úÖ Dossier .next supprim√©" -ForegroundColor Green
    }
}
