const fetch = require('node-fetch');

async function testPerformanceNewStructure() {
  console.log('üß™ Test de la nouvelle structure de la page Suivi de Performance...');
  
  try {
    // 1. Test de connexion au backend
    console.log('\n[1/4] Test de connexion au backend...');
    const healthResponse = await fetch('http://localhost:5000/api/health');
    if (healthResponse.ok) {
      console.log('‚úÖ Backend accessible');
    } else {
      throw new Error('Backend non accessible');
    }
    
    // 2. Test de login pour obtenir un token
    console.log('\n[2/4] Test de connexion utilisateur...');
    const loginResponse = await fetch('http://localhost:5000/api/auth/login', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        email: 'test@bms.com',
        password: 'test123'
      }),
    });
    
    if (!loginResponse.ok) {
      const errorData = await loginResponse.json().catch(() => ({}));
      throw new Error(`Erreur de connexion: ${loginResponse.status} - ${errorData.error || 'Erreur inconnue'}`);
    }
    
    const loginData = await loginResponse.json();
    const token = loginData.token;
    console.log('‚úÖ Connexion r√©ussie, token obtenu');
    
    // 3. Test de l'API de performance avec filtres de date
    console.log('\n[3/4] Test de l\'API performance avec filtres de date...');
    
    // Test avec p√©riode personnalis√©e
    const startDate = '2025-01-01';
    const endDate = '2025-12-31';
    
    const performanceResponse = await fetch(`http://localhost:5000/api/performance/overview?startDate=${startDate}&endDate=${endDate}`, {
      headers: {
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json',
      },
    });
    
    if (performanceResponse.ok) {
      const performanceData = await performanceResponse.json();
      console.log('‚úÖ API performance avec filtres de date fonctionne');
      console.log(`üìä Donn√©es r√©cup√©r√©es: ${performanceData.data.stats.totalOffres} offres totales`);
      console.log(`üìÖ P√©riode: ${startDate} √† ${endDate}`);
      
      // V√©rifier la nouvelle structure
      if (performanceData.data.stats.tauxGagnees !== undefined) {
        console.log('‚úÖ Nouvelle structure des statistiques: OK');
        console.log(`üèÜ Taux gagn√©es: ${performanceData.data.stats.tauxGagnees}%`);
        console.log(`üìâ Taux perdues: ${performanceData.data.stats.tauxPerdues}%`);
        console.log(`‚è≥ Taux en cours: ${performanceData.data.stats.tauxEnCours}%`);
      }
      
      if (performanceData.data.typesOffre) {
        console.log('‚úÖ Statistiques par type d\'offre: OK');
        console.log(`üìã Types d'offre r√©cup√©r√©s: ${performanceData.data.typesOffre.length}`);
        performanceData.data.typesOffre.forEach(type => {
          console.log(`  - ${type.nom}: ${type.total} total, ${type.gagnees} gagn√©es, ${type.perdues} perdues`);
        });
      }
    } else {
      const errorData = await performanceResponse.json();
      throw new Error(`Erreur API performance: ${performanceResponse.status} - ${errorData.error}`);
    }
    
    // 4. Test de l'API sans filtres de date (ann√©e en cours par d√©faut)
    console.log('\n[4/4] Test de l\'API performance sans filtres (ann√©e en cours)...');
    const performanceDefaultResponse = await fetch('http://localhost:5000/api/performance/overview', {
      headers: {
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json',
      },
    });
    
    if (performanceDefaultResponse.ok) {
      const performanceDefaultData = await performanceDefaultResponse.json();
      console.log('‚úÖ API performance sans filtres fonctionne');
      console.log(`üìä Donn√©es par d√©faut: ${performanceDefaultData.data.stats.totalOffres} offres totales`);
    } else {
      const errorData = await performanceDefaultResponse.json();
      throw new Error(`Erreur API performance par d√©faut: ${performanceDefaultResponse.status} - ${errorData.error}`);
    }
    
    console.log('\nüéâ Test de la nouvelle structure de Suivi de Performance r√©ussi !');
    console.log('üìù R√©sum√© des nouvelles fonctionnalit√©s:');
    console.log('  - ‚úÖ Filtre de p√©riode avec dates personnalisables');
    console.log('  - ‚úÖ Statistiques globales √©tendues (gagn√©es, perdues, en cours)');
    console.log('  - ‚úÖ Statistiques par type d\'offre (AO, AMI, Avis G√©n√©ral, etc.)');
    console.log('  - ‚úÖ Calculs automatiques des taux de r√©ussite');
    console.log('  - ‚úÖ Support des param√®tres de date dans l\'API');
    console.log('  - ‚úÖ Interface utilisateur avec calendrier interactif');
    
  } catch (error) {
    console.error('\n‚ùå Erreur lors du test:', error.message);
    process.exit(1);
  }
}

testPerformanceNewStructure();
