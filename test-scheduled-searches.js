const fetch = require('node-fetch');

const BASE_URL = 'http://localhost:5000/api';
let authToken = '';

async function testScheduledSearches() {
  try {
    console.log('üß™ Test de l\'API des recherches programm√©es...\n');

    // 1. Connexion pour obtenir un token
    console.log('1Ô∏è‚É£ Connexion pour obtenir un token...');
    const loginResponse = await fetch(`${BASE_URL}/auth/login`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        email: 'superadmin@bms.com',
        password: 'admin1234'
      })
    });

    if (loginResponse.ok) {
      const loginData = await loginResponse.json();
      authToken = loginData.token;
      console.log('‚úÖ Connexion r√©ussie, token obtenu');
    } else {
      console.log('‚ùå √âchec de la connexion');
      const errorData = await loginResponse.json();
      console.log('Erreur:', errorData);
      return;
    }

    // 2. R√©cup√©rer les recherches programm√©es existantes
    console.log('\n2Ô∏è‚É£ R√©cup√©ration des recherches programm√©es existantes...');
    const getResponse = await fetch(`${BASE_URL}/scheduled-searches`, {
      headers: {
        'Authorization': `Bearer ${authToken}`
      }
    });

    if (getResponse.ok) {
      const searchesData = await getResponse.json();
      console.log('‚úÖ Recherches programm√©es r√©cup√©r√©es:');
      console.log(`   - Total: ${searchesData.searches.length} recherches`);
      if (searchesData.searches.length > 0) {
        searchesData.searches.forEach((search, index) => {
          console.log(`   ${index + 1}. "${search.keywords}" (${search.frequency}) - ${search.is_active ? 'Active' : 'Inactive'}`);
        });
      }
    } else {
      console.log('‚ùå √âchec de la r√©cup√©ration des recherches programm√©es');
      const errorData = await getResponse.json();
      console.log('Erreur:', errorData);
    }

    // 3. Cr√©er une nouvelle recherche programm√©e
    console.log('\n3Ô∏è‚É£ Cr√©ation d\'une nouvelle recherche programm√©e...');
    const createResponse = await fetch(`${BASE_URL}/scheduled-searches`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${authToken}`
      },
      body: JSON.stringify({
        keywords: 'd√©veloppement web',
        frequency: 'daily',
        customSchedule: {
          weekDays: [1, 2, 3, 4, 5], // Lundi √† vendredi
          hours: [9, 14] // 9h et 14h
        }
      })
    });

    if (createResponse.ok) {
      const createData = await createResponse.json();
      console.log('‚úÖ Nouvelle recherche programm√©e cr√©√©e:');
      console.log(`   - ID: ${createData.search.id}`);
      console.log(`   - Mots-cl√©s: "${createData.search.nom_recherche}"`);
      console.log(`   - Fr√©quence: ${createData.search.frequence}`);
      console.log(`   - Prochaine ex√©cution: ${new Date(createData.search.prochaine_execution).toLocaleString('fr-FR')}`);
      console.log(`   - Message: ${createData.message}`);
    } else {
      console.log('‚ùå √âchec de la cr√©ation de la recherche programm√©e');
      const errorData = await createResponse.json();
      console.log('Erreur:', errorData);
    }

    // 4. R√©cup√©rer √† nouveau pour v√©rifier l'ajout
    console.log('\n4Ô∏è‚É£ V√©rification de l\'ajout...');
    const getResponse2 = await fetch(`${BASE_URL}/scheduled-searches`, {
      headers: {
        'Authorization': `Bearer ${authToken}`
      }
    });

    if (getResponse2.ok) {
      const searchesData2 = await getResponse2.json();
      console.log('‚úÖ Recherches programm√©es apr√®s ajout:');
      console.log(`   - Total: ${searchesData2.searches.length} recherches`);
      searchesData2.searches.forEach((search, index) => {
        console.log(`   ${index + 1}. "${search.keywords}" (${search.frequency}) - ${search.is_active ? 'Active' : 'Inactive'}`);
      });
    } else {
      console.log('‚ùå √âchec de la r√©cup√©ration apr√®s ajout');
    }

    // 5. Test des statistiques
    console.log('\n5Ô∏è‚É£ Test des statistiques...');
    const statsResponse = await fetch(`${BASE_URL}/scheduled-searches/statistiques`, {
      headers: {
        'Authorization': `Bearer ${authToken}`
      }
    });

    if (statsResponse.ok) {
      const statsData = await statsResponse.json();
      console.log('‚úÖ Statistiques r√©cup√©r√©es:');
      console.log(`   - Total: ${statsData.total_recherches} recherches`);
      console.log(`   - Actives: ${statsData.recherches_actives} recherches`);
      console.log(`   - Inactives: ${statsData.recherches_inactives} recherches`);
      console.log(`   - Par fr√©quence: ${JSON.stringify(statsData.par_frequence)}`);
    } else {
      console.log('‚ùå √âchec de la r√©cup√©ration des statistiques');
      const errorData = await statsResponse.json();
      console.log('Erreur:', errorData);
    }

    console.log('\nüéâ Tests des recherches programm√©es termin√©s avec succ√®s !');

  } catch (error) {
    console.error('‚ùå Erreur lors des tests:', error.message);
  }
}

// Ex√©cuter les tests
testScheduledSearches();
