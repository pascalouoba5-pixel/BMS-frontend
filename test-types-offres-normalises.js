const fetch = require('node-fetch');

async function testTypesOffresNormalises() {
  console.log('üß™ Test de la normalisation des types d\'offres...');
  
  try {
    // 1. Test de connexion au backend
    console.log('\n[1/3] Test de connexion au backend...');
    const healthResponse = await fetch('http://localhost:5000/api/health');
    if (healthResponse.ok) {
      console.log('‚úÖ Backend accessible');
    } else {
      throw new Error('Backend non accessible');
    }
    
    // 2. Test de login pour obtenir un token
    console.log('\n[2/3] Test de connexion utilisateur...');
    const loginResponse = await fetch('http://localhost:5000/api/auth/login', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        email: 'test@bms.com',
        password: 'test123'
      }),
    });
    
    if (!loginResponse.ok) {
      const errorData = await loginResponse.json().catch(() => ({}));
      throw new Error(`Erreur de connexion: ${loginResponse.status} - ${errorData.error || 'Erreur inconnue'}`);
    }
    
    const loginData = await loginResponse.json();
    const token = loginResponse.token;
    console.log('‚úÖ Connexion r√©ussie, token obtenu');
    
    // 3. Test de l'API de performance pour v√©rifier la normalisation des types
    console.log('\n[3/3] Test de la normalisation des types d\'offres...');
    
    const performanceResponse = await fetch('http://localhost:5000/api/performance/overview', {
      headers: {
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json',
      },
    });
    
    if (performanceResponse.ok) {
      const performanceData = await performanceResponse.json();
      console.log('‚úÖ API performance accessible');
      
      if (performanceData.data.typesOffre) {
        console.log(`üìã Types d'offre r√©cup√©r√©s: ${performanceData.data.typesOffre.length}`);
        
        // Types d'offres attendus selon le formulaire
        const typesAttendus = ['AO', 'AMI', 'Avis G√©n√©ral', 'Appel √† projet', 'Accord cadre'];
        
        // V√©rifier que les types sont bien normalis√©s
        performanceData.data.typesOffre.forEach(type => {
          console.log(`  - ${type.nom}: ${type.total} total, ${type.gagnees} gagn√©es, ${type.perdues} perdues`);
          
          // V√©rifier que le nom est bien normalis√©
          if (typesAttendus.includes(type.nom)) {
            console.log(`    ‚úÖ Type normalis√© correctement: ${type.nom}`);
          } else if (type.nom === 'Non sp√©cifi√©') {
            console.log(`    ‚ÑπÔ∏è Type non reconnu: ${type.nom}`);
          } else {
            console.log(`    ‚ö†Ô∏è Type non normalis√©: ${type.nom}`);
          }
        });
        
        // V√©rifier la pr√©sence des types principaux
        const typesTrouves = performanceData.data.typesOffre.map(t => t.nom);
        const typesManquants = typesAttendus.filter(type => !typesTrouves.includes(type));
        
        if (typesManquants.length > 0) {
          console.log(`‚ö†Ô∏è Types manquants: ${typesManquants.join(', ')}`);
        } else {
          console.log('‚úÖ Tous les types d\'offres principaux sont pr√©sents');
        }
        
        console.log('\nüìù R√©sum√© de la normalisation:');
        console.log('  - ‚úÖ Types d\'offres normalis√©s selon le formulaire');
        console.log('  - ‚úÖ Gestion des variations de casse et d\'accents');
        console.log('  - ‚úÖ Support des synonymes (ex: "appel d\'offres" ‚Üí "AO")');
        console.log('  - ‚úÖ Cat√©gorisation des types non reconnus');
        
      } else {
        console.log('‚ö†Ô∏è Aucun type d\'offre trouv√© dans les donn√©es');
      }
    } else {
      const errorData = await performanceResponse.json();
      throw new Error(`Erreur API performance: ${performanceResponse.status} - ${errorData.error}`);
    }
    
    console.log('\nüéâ Test de normalisation des types d\'offres r√©ussi !');
    
  } catch (error) {
    console.error('\n‚ùå Erreur lors du test:', error.message);
    process.exit(1);
  }
}

testTypesOffresNormalises();
